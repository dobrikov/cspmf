(Module ((:) (Channel ((:) (Ident "car") ((:) (Ident "train") ([]))) (Just (TypeDot ((:) (Var (Ident "LOC")) ([]))))) ((:) (Channel ((:) (Ident "gate") ([])) (Just (TypeDot ((:) (Var (Ident "POS")) ([]))))) ((:) (Channel ((:) (Ident "crash") ([])) (Nothing)) ((:) (DataType (Ident "LOC") ((:) (Constructor (Ident "approach") (Nothing)) ((:) (Constructor (Ident "enter") (Nothing)) ((:) (Constructor (Ident "leave") (Nothing)) ([]))))) ((:) (DataType (Ident "POS") ((:) (Constructor (Ident "raise") (Nothing)) ((:) (Constructor (Ident "lower") (Nothing)) ([])))) ((:) (PatBind (VarPat (Ident "CR")) (Fun2 (BuiltIn (F_ExtChoice)) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "approach"))) ([])) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "enter"))) ([])) (Var (Ident "C")))) (PrefixExp (Var (Ident "train")) ((:) (OutComm (Var (Ident "approach"))) ([])) (PrefixExp (Var (Ident "train")) ((:) (OutComm (Var (Ident "enter"))) ([])) (Var (Ident "T")))))) ((:) (PatBind (VarPat (Ident "C")) (Fun2 (BuiltIn (F_ExtChoice)) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "leave"))) ([])) (Var (Ident "CR"))) (PrefixExp (Var (Ident "train")) ((:) (OutComm (Var (Ident "approach"))) ([])) (PrefixExp (Var (Ident "train")) ((:) (OutComm (Var (Ident "enter"))) ([])) (Var (Ident "CT")))))) ((:) (PatBind (VarPat (Ident "T")) (Fun2 (BuiltIn (F_ExtChoice)) (PrefixExp (Var (Ident "train")) ((:) (OutComm (Var (Ident "leave"))) ([])) (Var (Ident "CR"))) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "approach"))) ([])) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "enter"))) ([])) (Var (Ident "CT")))))) ((:) (PatBind (VarPat (Ident "CT")) (PrefixExp (Var (Ident "crash")) ([]) (Stop))) ((:) (PatBind (VarPat (Ident "GATE")) (Fun2 (BuiltIn (F_ExtChoice)) (PrefixExp (Var (Ident "gate")) ((:) (OutComm (Var (Ident "lower"))) ([])) (PrefixExp (Var (Ident "gate")) ((:) (OutComm (Var (Ident "raise"))) ([])) (Var (Ident "GATE")))) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "enter"))) ([])) (Var (Ident "GATE"))))) ((:) (PatBind (VarPat (Ident "CARS")) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "approach"))) ([])) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "enter"))) ([])) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "leave"))) ([])) (Var (Ident "CARS")))))) ((:) (PatBind (VarPat (Ident "TRAINS")) (PrefixExp (Var (Ident "train")) ((:) (OutComm (Var (Ident "approach"))) ([])) (PrefixExp (Var (Ident "train")) ((:) (OutComm (Var (Ident "enter"))) ([])) (PrefixExp (Var (Ident "train")) ((:) (OutComm (Var (Ident "leave"))) ([])) (Var (Ident "TRAINS")))))) ((:) (PatBind (VarPat (Ident "ET")) (Closure ((:) (Var (Ident "train")) ([])))) ((:) (PatBind (VarPat (Ident "EC")) (Closure ((:) (Var (Ident "car")) ([])))) ((:) (PatBind (VarPat (Ident "EGC")) (SetEnum ((:) (DotTuple ((:) (Var (Ident "gate")) ((:) (Var (Ident "raise")) ([])))) ((:) (DotTuple ((:) (Var (Ident "gate")) ((:) (Var (Ident "lower")) ([])))) ((:) (DotTuple ((:) (Var (Ident "car")) ((:) (Var (Ident "enter")) ([])))) ([])))))) ((:) (PatBind (VarPat (Ident "EX")) (SetEnum ((:) (Var (Ident "crash")) ([])))) ((:) (PatBind (VarPat (Ident "ES")) (Closure ((:) (Var (Ident "train")) ((:) (Var (Ident "car")) ((:) (Var (Ident "gate")) ((:) (Var (Ident "crash")) ([]))))))) ((:) (PatBind (VarPat (Ident "ETCC")) (Closure ((:) (Var (Ident "train")) ((:) (Var (Ident "car")) ((:) (Var (Ident "crash")) ([])))))) ((:) (PatBind (VarPat (Ident "ETCG")) (Closure ((:) (Var (Ident "train")) ((:) (Var (Ident "car")) ((:) (Var (Ident "gate")) ([])))))) ((:) (PatBind (VarPat (Ident "SYSTEM")) (ProcAParallel (Var (Ident "ES")) (Var (Ident "ET")) (Parens (ProcAParallel (Var (Ident "ES")) (Var (Ident "EC")) (Parens (ProcAParallel (Var (Ident "ETCC")) (Var (Ident "EGC")) (Var (Ident "CR")) (Var (Ident "GATE")))) (Var (Ident "CARS")))) (Var (Ident "TRAINS")))) ((:) (PatBind (VarPat (Ident "SPEC")) (ProcRepChoice ((:) (Generator (VarPat (Ident "x")) (Var (Ident "ETCG"))) ([])) (PrefixExp (Var (Ident "x")) ([]) (Var (Ident "SPEC"))))) ((:) (AssertRef (Var (Ident "SPEC")) "k" (Var (Ident "SYSTEM"))) ((:) (AssertRef (Stop) "k" (Fun2 (BuiltIn (F_Hiding)) (Var (Ident "SYSTEM")) (Var (Ident "ETCG")))) ((:) (PatBind (VarPat (Ident "CONTROL")) (Fun2 (BuiltIn (F_ExtChoice)) (PrefixExp (Var (Ident "train")) ((:) (OutComm (Var (Ident "approach"))) ([])) (PrefixExp (Var (Ident "gate")) ((:) (OutComm (Var (Ident "lower"))) ([])) (PrefixExp (Var (Ident "train")) ((:) (OutComm (Var (Ident "enter"))) ([])) (PrefixExp (Var (Ident "train")) ((:) (OutComm (Var (Ident "leave"))) ([])) (PrefixExp (Var (Ident "gate")) ((:) (OutComm (Var (Ident "raise"))) ([])) (Var (Ident "CONTROL"))))))) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "approach"))) ([])) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "enter"))) ([])) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "leave"))) ([])) (Var (Ident "CONTROL"))))))) ((:) (PatBind (VarPat (Ident "SAFE_SYSTEM")) (ProcAParallel (Var (Ident "ES")) (Var (Ident "ETCG")) (Var (Ident "SYSTEM")) (Var (Ident "CONTROL")))) ((:) (AssertRef (Var (Ident "SPEC")) "k" (Var (Ident "SAFE_SYSTEM"))) ((:) (AssertRef (Stop) "k" (Fun2 (BuiltIn (F_Hiding)) (Var (Ident "SAFE_SYSTEM")) (Var (Ident "ETCG")))) ((:) (PatBind (VarPat (Ident "SPEC1")) (ProcRepChoice ((:) (Generator (VarPat (Ident "x2")) (Closure ((:) (Var (Ident "gate")) ([])))) ([])) (PrefixExp (Var (Ident "x2")) ([]) (Var (Ident "SPEC1"))))) ((:) (PatBind (VarPat (Ident "SPEC2")) (Fun2 (BuiltIn (F_ExtChoice)) (PrefixExp (Var (Ident "train")) ((:) (OutComm (Var (Ident "approach"))) ([])) (PrefixExp (Var (Ident "train")) ((:) (OutComm (Var (Ident "enter"))) ([])) (PrefixExp (Var (Ident "train")) ((:) (OutComm (Var (Ident "leave"))) ([])) (Var (Ident "SPEC2"))))) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "approach"))) ([])) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "enter"))) ([])) (PrefixExp (Var (Ident "car")) ((:) (OutComm (Var (Ident "leave"))) ([])) (Var (Ident "SPEC2"))))))) ((:) (PatBind (VarPat (Ident "SPEC0")) (Fun2 (BuiltIn (F_Interleave)) (Var (Ident "SPEC1")) (Var (Ident "SPEC2")))) ((:) (AssertRef (Var (Ident "SPEC0")) "k" (Var (Ident "SYSTEM"))) ((:) (AssertRef (Var (Ident "SPEC0")) "k" (Var (Ident "SAFE_SYSTEM"))) ([]))))))))))))))))))))))))))))))))) (Nothing))