(Module ((:) (DataType (Ident "Move") ((:) (Constructor (Ident "Up") (Nothing)) ((:) (Constructor (Ident "Down") (Nothing)) ([])))) ((:) (Channel ((:) (Ident "left") ((:) (Ident "right") ([]))) (Just (TypeDot ((:) (Var (Ident "Move")) ([]))))) ((:) (PatBind (VarPat (Ident "FORK")) (Fun2 (BuiltIn (F_ExtChoice)) (PrefixExp (Var (Ident "left")) ((:) (OutComm (Var (Ident "Up"))) ([])) (PrefixExp (Var (Ident "left")) ((:) (OutComm (Var (Ident "Down"))) ([])) (Var (Ident "FORK")))) (PrefixExp (Var (Ident "right")) ((:) (OutComm (Var (Ident "Up"))) ([])) (PrefixExp (Var (Ident "right")) ((:) (OutComm (Var (Ident "Down"))) ([])) (Var (Ident "FORK")))))) ((:) (PatBind (VarPat (Ident "PHIL")) (PrefixExp (Var (Ident "left")) ((:) (OutComm (Var (Ident "Up"))) ([])) (PrefixExp (Var (Ident "right")) ((:) (OutComm (Var (Ident "Up"))) ([])) (PrefixExp (Var (Ident "left")) ((:) (OutComm (Var (Ident "Down"))) ([])) (PrefixExp (Var (Ident "right")) ((:) (OutComm (Var (Ident "Down"))) ([])) (Var (Ident "PHIL"))))))) ((:) (FunBind (Ident "LPHILS") ((:) (FunCase ((:) ((:) (VarPat (Ident "n")) ([])) ([])) (Let ((:) (FunBind (Ident "L") ((:) (FunCase ((:) ((:) (IntPat (0)) ([])) ([])) (ProcLinkParallel (LinkList ((:) (Link (Var (Ident "right")) (Var (Ident "left"))) ([]))) (Var (Ident "FORK")) (Var (Ident "PHIL")))) ((:) (FunCase ((:) ((:) (VarPat (Ident "n2")) ([])) ([])) (Let ((:) (PatBind (VarPat (Ident "HALF")) (CallFunction (Var (Ident "LPHILS")) ((:) ((:) (Fun2 (BuiltIn (F_Sub)) (Var (Ident "n2")) (IntExp (1))) ([])) ([])))) ([])) (ProcLinkParallel (LinkList ((:) (Link (Var (Ident "right")) (Var (Ident "left"))) ([]))) (Var (Ident "HALF")) (Var (Ident "HALF"))))) ([])))) ([])) (CallFunction (Var (Ident "normal")) ((:) ((:) (ProcRenaming ([]) (CallFunction (Var (Ident "L")) ((:) ((:) (Var (Ident "n")) ([])) ([])))) ([])) ([]))))) ([]))) ((:) (Transparent ((:) (Ident "normal") ([]))) ((:) (FunBind (Ident "RPHILS") ((:) (FunCase ((:) ((:) (VarPat (Ident "n3")) ([])) ([])) (ProcRenaming ((:) (Rename (Var (Ident "left")) (Var (Ident "right"))) ((:) (Rename (Var (Ident "right")) (Var (Ident "left"))) ([]))) (CallFunction (Var (Ident "LPHILS")) ((:) ((:) (Var (Ident "n3")) ([])) ([]))))) ([]))) ((:) (FunBind (Ident "PHILS") ((:) (FunCase ((:) ((:) (VarPat (Ident "n4")) ([])) ([])) (ProcSharing (Closure ((:) (Var (Ident "left")) ((:) (Var (Ident "right")) ([])))) (CallFunction (Var (Ident "LPHILS")) ((:) ((:) (Fun2 (BuiltIn (F_Sub)) (Var (Ident "n4")) (IntExp (1))) ([])) ([]))) (CallFunction (Var (Ident "RPHILS")) ((:) ((:) (Fun2 (BuiltIn (F_Sub)) (Var (Ident "n4")) (IntExp (1))) ([])) ([]))))) ([]))) ((:) (AssertBool (CallFunction (Var (Ident "PHILS")) ((:) ((:) (IntExp (1)) ([])) ([])))) ((:) (AssertBool (CallFunction (Var (Ident "PHILS")) ((:) ((:) (IntExp (10)) ([])) ([])))) ((:) (AssertBool (CallFunction (Var (Ident "PHILS")) ((:) ((:) (IntExp (100)) ([])) ([])))) ((:) (AssertBool (CallFunction (Var (Ident "PHILS")) ((:) ((:) (IntExp (1000)) ([])) ([])))) ([]))))))))))))) (Nothing))